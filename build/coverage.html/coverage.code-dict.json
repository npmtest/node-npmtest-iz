{"/home/travis/build/npmtest/node-npmtest-iz/test.js":"/* istanbul instrument in package npmtest_iz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/lib.npmtest_iz.js":"/* istanbul instrument in package npmtest_iz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_iz = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_iz = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-iz && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_iz */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_iz\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_iz.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_iz.rollup.js'] =\n            local.assetsDict['/assets.npmtest_iz.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_iz.__dirname + '/lib.npmtest_iz.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/app.js":"/*global require, module */\n\n(function() {\n    'use strict';\n\n    // serves as our bootstrap into other node apps\n    var iz = require('../iz/src/iz'),\n        are = require('../iz/src/are'),\n        validators = require('../iz/src/validators');\n\n    iz.are = are;\n    iz.validators = validators;\n\n    module.exports = iz;\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/src/iz.js":"/*global module, exports, require */\nvar validators = require('./validators');\n\n(function () {\n    'use strict';\n\n    var iz;\n\n    /**\n     * @param value\n     * @param error_messages\n     * @constructor\n     */\n    function Iz(value, error_messages) {\n        var self = this;\n\n        if (typeof error_messages === 'object') {\n            this.error_messages = error_messages;\n        } else {\n            this.error_messages = {};\n        }\n\n        this._not = false;\n        this._calledValidations = {};\n\n        function not() {\n            self._not = true;\n            return self;\n        }\n\n        function revalidate() {\n            self.errors = [];\n            self.valid = true;\n\n            for (var key in self._calledValidations) {\n                var rule = self._calledValidations[key];\n\n                if (self._calledValidations.hasOwnProperty(key)) {\n                    if (rule.not) {\n                        self.not();\n                    }\n\n                    validator_partial(rule.validation)\n                        .apply(self, rule.args);\n                }\n            }\n            return self;\n        }\n\n        function setValue(value) {\n            self.value = value;\n            self.revalidate();\n            return self;\n        }\n\n        /**\n         * Formats a string using the args index as the key\n         * @param {String} string\n         * @param {Array|Object} args\n         */\n        function format(string, args) {\n            for (var i in args) {\n                string = string.replace(\n                    new RegExp('\\{\\{\\\\s*'+i+'\\\\s*\\}\\}', 'gim'),\n                    args[i]\n                );\n            }\n            return string;\n        }\n\n        this.not = not;\n        this.value = value;\n        this.setValue = setValue;\n        this.revalidate = revalidate;\n        this.errors = [];\n        this.valid = true;\n\n        /**\n         * Partial application with currying into a validation function. Pushes to error array if an error exists.\n         * If an error_message is specified for some specific check then that message is used. Otherwise just the function name.\n         * Also sets valid to false if an error is found. It can't ever set valid to true.\n         * @param fn\n         */\n        function validator_partial(fn) {\n            var fnName = Array.prototype.slice.call(arguments)[0],\n                args = Array.prototype.slice.call(arguments, 1);\n            args.unshift(value); //add value to the front\n            return function() {\n                var argArray = Array.prototype.slice.call(arguments),\n                    allArguments = [self.value].concat(argArray),\n                    result = validators[fn].apply(null, allArguments),\n                    key = (self._not ? 'not_' : '') + fnName;\n\n                //save rules that have been called\n                self._calledValidations[key] = {\n                    not: self._not,\n                    validation: fn,\n                    args: argArray\n                };\n\n                //2 failed validation cases\n                if ((!this._not && !result) || (this._not && result)) {\n                    //change error message based on not and if an error message is specified\n                    if (!this._not && typeof this.error_messages[fn] !== 'undefined') {\n                        this.errors.push(format(this.error_messages[fn], allArguments));\n                    } else if (this._not && typeof this.error_messages['not_' + fn] !== 'undefined') {\n                        this.errors.push(format(this.error_messages['not_' + fn], allArguments));\n                    } else if (this._not) {\n                        this.errors.push('Not ' + fn);\n                    } else {\n                        this.errors.push(fn);\n                    }\n                    //all of these cases result in non-validity\n                    this.valid = false;\n                }\n                //set not back for the next test\n                this._not = false;\n                //chain\n                return this;\n            };\n        }\n\n        for (var fn in validators) {\n            if (validators.hasOwnProperty(fn)) {\n                this[fn] = validator_partial(fn);\n            }\n        }\n    }\n\n    /**\n     * Factory for creating chained checking objects\n     * @param value{*}\n     * @param error_messages{Object}\n     * @return {Object} of type Iz\n     */\n    iz = function (value, error_messages) {\n        return (new Iz(value, error_messages));\n    };\n\n    for (var fn in validators) {\n        if (validators.hasOwnProperty(fn)) {\n            iz[fn] = validators[fn];\n        }\n    }\n\n    iz.addValidator = function (name, func, force) {\n        validators.addValidator(name, func, force);\n        iz[name] = func;\n    };\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = iz;\n        }\n        exports.iz = iz;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/src/validators.js":"/*global module, exports */\n(function () {\n    'use strict';\n\n    function addValidator(name, validator, force) {\n        if (typeof validators [name] !== 'undefined'\n            && force !== true) {\n            throw new Error('Not adding validator because ' + name + ' already exists');\n        }\n\n        if (name === 'addValidator') {\n            throw new Error('Cannot override addValidator');\n        }\n\n        validators[name] = validator;\n    }\n\n    var validators = {};\n\n    function izAlphaNumeric(value) {\n        return (/^[a-z0-9]+$/i).test(value);\n    }\n\n    function izString(value) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    function izNumber(val) {\n        if ((typeof val === 'string' || typeof val === 'number') && !isNaN(val % 1)) {\n            return true;\n        }\n        return false;\n    }\n\n    function izBetween(val, start, end) {\n        if ((typeof val === 'object' || typeof val === 'function') ||\n                (typeof start === 'object' || typeof start === 'function') ||\n                (typeof end === 'object' || typeof end === 'function')) {\n            return false;\n        }\n\n        if ((val >= start && val <= end)) {\n            return true;\n        }\n        return false;\n    }\n\n    function izBoolean(value) {\n        if (typeof value === 'boolean' || (typeof value === 'number' && (value === 0 || value === 1))) {\n            return true;\n        }\n        return false;\n    }\n\n    function izInt(value, allowDecimal) {\n        if (typeof allowDecimal !== 'boolean') {\n            allowDecimal = false;\n        }\n\n        if (!allowDecimal) {\n            return (/^\\s*(\\+|-)?\\d+\\s*$/).test(value);\n        } else if (izNumber(value) && value % 1 === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @author Phil Green (ShirtlessKirk) https://gist.github.com/2134376\n     */\n    function luhnChk(luhn) {\n        var len = luhn.length,\n            mul = 0,\n            prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n            sum = 0;\n\n        while (len--) {\n            sum += prodArr[mul][parseInt(luhn.charAt(len), 10)];\n            mul ^= 1;\n        }\n\n        return sum % 10 === 0 && sum > 0;\n    }\n\n    /**\n     * Returns the name of the class that the object is\n     * @author http://blog.magnetiq.com/post/514962277/finding-out-class-names-of-javascript-objects\n     * @param obj{Object}\n     * @return String name of the class\n     */\n    function izGetObjectClass(obj) {\n        if (obj && obj.constructor && obj.constructor.toString) {\n            var arr = obj.constructor.toString().match(/function\\s*(\\w+)/);\n\n            if (arr && arr.length === 2) {\n                return arr[1];\n            }\n        }\n\n        return undefined;\n    }\n\n    function izCc(value) {\n        if (typeof value !== 'string' && typeof value !== 'number') {\n            return false;\n        }\n\n        value = value.replace(/[ \\-]/g, ''); // normalizing\n        if (izInt(value)) {\n            return luhnChk(value);\n        }\n        return false;\n    }\n\n    /**\n     * TODO: maybe provide format and use: http://www.mattkruse.com/javascript/date/source.html\n     * but that seems in elegant. Then again dates in general are in elegant... *shrug*\n     * @param value\n     * @return {Boolean}\n     */\n    function izDate(value) {\n        return izGetObjectClass(value) === 'Date' ||\n            new Date(value).toString() !== 'Invalid Date' || !isNaN(new Date(value));\n    }\n\n    function izDecimal(value) {\n        return izNumber(value) && !izInt(value, false);\n    }\n\n    /**\n     * Basically just expects the @ symbol. There was a full discussion about it here:\n     * http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n     *\n     * Might make this more complicated in the future... or not *shrug*\n     * @param value\n     * @return {Boolean}\n     */\n    function izEmail(value) {\n        return !(typeof value !== 'string') && (/\\S+@\\S+/).test(value);\n    }\n\n    /**\n     * True if the parameter is empty. length > 0 for objects (if exists) or arrays, Functions/Objects have no properties,\n     * or the type is primitive.\n     * @param value of any type\n     * @return {Boolean}\n     */\n    function izEmpty(value) {\n        var type = typeof value,\n            key;\n        //arrays and objects with length properties\n        if(value.hasOwnProperty('length') && type !== 'function' && value.length > 0) {\n            return false;\n        } else if(type === 'function' || type === 'object') {\n            for (key in value) {\n                if(value.hasOwnProperty(key)) {\n                    return false; //on first valid key, return false;\n                }\n            }\n        }\n\n        //primitives are empty as are objects without properties and empty arrays\n        return true;\n    }\n\n    function izBlank(value) {\n        if (typeof value === 'string') {\n            return izEmpty(value);\n        }\n\n        return false;\n    }\n\n    /**\n     * Strictly Equal\n     * @param value\n     * @param value2\n     * @return {Boolean}\n     */\n    function izEqual(value, value2) {\n        var valueType = typeof value,\n            value2Type = typeof value2,\n            key;\n\n        if ((valueType === 'object' || valueType === 'function') && typeof value.equals === 'function') {\n            if ((value2Type === 'object' || value2Type === 'function')) {\n                //value2 does not need the equals method, if an exception is thrown here that is the implementor\n                //catching it returning false might result in a bug that is hard to track\n                return value.equals(value2);\n            }\n        } else if(valueType === 'object' || valueType === 'function') {\n            for(key in value) {\n                if (value.hasOwnProperty(key) && !value2.hasOwnProperty(key) && key !== 'equals') {\n                    //if property is an object then recursively check\n                    if (typeof value[key] === 'object' || typeof value[key] === 'function' && !izEqual(value[key], value2[key])) {\n                        return false;\n                    } else if (value[key] !== value2[key]) { //if not object or function\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        return value === value2;\n    }\n\n    /**\n     * Is obj1 and extension of obj2? True if this is the case.\n     * @param obj1\n     * @param obj2\n     * @return {Boolean}\n     */\n    function izExtension(obj1, obj2) {\n        var key;\n        if (typeof obj1 !== 'object' || typeof obj2 !== 'object') {\n            return false;\n        }\n\n        for (key in obj2) {\n            if (obj2.hasOwnProperty(key) && typeof obj1[key] === 'undefined') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Accepts anything.anything.anything.ext.ext and matches the last ext\n     * @param value a file extension of a file name\n     */\n    function izFileExtension(value, validExtensions) {\n        var ext;\n\n        if (typeof validExtensions !== 'object' ||\n                typeof validExtensions.indexOf === 'undefined' || typeof value !== 'string') {\n            return false;\n        }\n\n        ext = value.split('.').pop().toLowerCase(); //split by '.' and get me the last thing, then lowercase it\n        if (validExtensions.indexOf(ext) !== -1) {\n            return true;\n        }\n        return false;\n    }\n\n    function izFileExtensionAudio(value) {\n        var validExtensions = ['mp3', 'ogg', 'aac', 'wav'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izFileExtensionImage(value) {\n        var validExtensions = ['gif', 'png', 'jpeg', 'jpg', 'svg', 'bmp'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izFileExtensionVideo(value) {\n        var validExtensions = ['mp4', 'ogv', 'm4v', 'mov', 'avi'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izInArray(value, arr) {\n        if (typeof arr !== 'object' || typeof arr.indexOf === 'undefined') {\n            return false;\n        }\n\n        if (arr.indexOf(value) !== -1) {\n            return true;\n        }\n        return false;\n    }\n\n    function izAnArray(arr) {\n        return Object.prototype.toString.call(arr) === '[object Array]';\n    }\n\n    /**\n     * Matches IPv4, IPv6 or hostname\n     * @author Mikulas Dite http://stackoverflow.com/questions/9208814/validate-ipv4-ipv6-and-hostname\n     * @param str\n     * @return boolean\n     */\n    function izIp(str) {\n        var re = (/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-fA-F]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,1}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,2}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,3}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:[0-9a-fA-F]{1,4})):)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,4}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,5}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,6}(?:(?:[0-9a-fA-F]{1,4})))?::))))$/);\n        return re.test(str);\n    }\n\n    function izMinLength(val, len) {\n        if ((typeof val === 'string' || typeof val === 'object') &&\n                typeof val.length !== 'undefined' && izInt(len) && val.length >= len) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izMaxLength(val, len) {\n        if ((typeof val === 'string' || typeof val === 'object') &&\n            typeof val.length !== 'undefined' && izInt(len) && val.length <= len) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izMultiple(num, multiple) {\n        if (typeof num !== 'number' || typeof multiple !== 'number') {\n            return false;\n        }\n        if (num % multiple === 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izOfType(obj, type) {\n        if (typeof obj === 'object' && typeof obj.length === 'undefined' && typeof type === 'string') {\n            //is truly an object\n            if (izGetObjectClass(obj) === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izPhone(str) {\n        var cleanedStr = '',\n            numbers = [];\n        if (typeof str === 'string') {\n            cleanedStr = str.replace(/[^x0-9]/g, '');\n            numbers = cleanedStr.split('x');\n            //first and last array elements are numbers, this allows for multiple x's between the phone number and extension (if exists)\n            if (numbers.length > 0 && izInt(numbers[0]) &&  // has at least 1 value in the array and it is an integer\n                    (numbers[0].length === 10 || numbers[0].length === 11) && // it has an extension with or without country code\n                    izInt(numbers.pop())) { //if it is has an extension it is a valid number\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izPostal(str) {\n        var cleanedStr = '';\n        if (typeof str === 'string') {\n            //removing everything but numbers\n            cleanedStr = str.replace(/[^0-9]/g, '');\n            //is either a 5 or 9 digit zip code...\n            if (izInt(cleanedStr) &&\n                    (cleanedStr.length === 5 || cleanedStr.length === 9)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izSsn(str) {\n        var cleanedStr = '';\n        if (typeof str === 'string') {\n            cleanedStr = str.replace(/[^0-9]/g, '');\n            //There are varying rules depending on date of issuance. I will say that having 9 digits is all that is needed for now.\n            if (izInt(cleanedStr) && (cleanedStr.length === 9)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izRequired(obj) {\n        return obj !== undefined && obj !== null && obj !== '';\n    }\n\n\n    function izRequiredOr(validator) {\n        return function(val) {\n            return !izRequired(val) || validator.apply(this, Array.prototype.slice.call(arguments));\n        };\n    }\n\n    //Expose some methods, this is done to preserve function names in all browsers\n    validators.alphaNumeric = izRequiredOr(izAlphaNumeric);\n    validators.string = izRequiredOr(izString);\n    validators.between = izRequiredOr(izBetween);\n    validators.blank = izRequiredOr(izBlank);\n    validators.boolean = izRequiredOr(izBoolean);\n    validators.cc = izRequiredOr(izCc);\n    validators.date = izRequiredOr(izDate);\n    validators.decimal = izRequiredOr(izDecimal);\n    validators.email = izRequiredOr(izEmail);\n    validators.empty = izRequiredOr(izEmpty);\n    validators.equal = izRequiredOr(izEqual);\n    validators.extension = izExtension;\n    validators.fileExtension = izRequiredOr(izFileExtension);\n    validators.fileExtensionAudio = izRequiredOr(izFileExtensionAudio);\n    validators.fileExtensionImage = izRequiredOr(izFileExtensionImage);\n    validators.fileExtensionVideo = izRequiredOr(izFileExtensionVideo);\n    validators.inArray = izInArray;\n    validators.anArray = izRequiredOr(izAnArray);\n    validators.int = izRequiredOr(izInt);\n    validators.ip = izRequiredOr(izIp);\n    validators.minLength = izRequiredOr(izMinLength);\n    validators.maxLength = izRequiredOr(izMaxLength);\n    validators.multiple = izRequiredOr(izMultiple);\n    validators.number = izRequiredOr(izNumber);\n    validators.ofType = izRequiredOr(izOfType);\n    validators.phone = izRequiredOr(izPhone);\n    validators.postal = izRequiredOr(izPostal);\n    validators.required = izRequired;\n    validators.ssn = izRequiredOr(izSsn);\n\n    validators.addValidator = addValidator;\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = validators;\n        }\n        exports.validators = validators;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/src/are.js":"/*global module, exports */\n\nvar iz = require('./iz');\n\n(function () {\n    'use strict';\n    var are;\n\n    function Are(rules) {\n        var self = this,\n            currentRule,\n            rule,\n            errors,\n            key;\n\n        self.fields = {};\n\n        for (key in rules) {\n            if (!rules.hasOwnProperty(key)) {\n                continue;\n            }\n\n            // if is an iz object just add rule directly, if not assemble an iz object\n            if (typeof rules[key].revalidate !== 'undefined') {\n                self.fields[key] = rules[key];\n            } else {\n                errors = {};\n\n                // make errors dictionary\n                for (rule in rules[key]) {\n                    if (!rules[key].hasOwnProperty(rule)) {\n                        continue;\n                    }\n\n                    if (rules[key][rule].error) {\n                        errors[rules[key][rule].rule] = rules[key][rule].error;\n                    }\n                }\n\n                currentRule = iz(0, errors);\n\n                // call rule\n                for (rule in rules[key]) {\n                    if (!rules[key].hasOwnProperty(rule)) {\n                        continue;\n                    }\n\n                    // handle 'not_'\n                    if (rules[key][rule].rule.indexOf('not_') > -1) {\n                        currentRule.not();\n                    }\n\n                    currentRule[rules[key][rule].rule.replace('not_', '')].apply(\n                        currentRule,\n                        rules[key][rule].args || []\n                    );\n                }\n\n                self.fields[key] = currentRule;\n            }\n        }\n\n        this.valid = function() {\n            for (var key in self.fields) {\n                if (!self.fields[key].hasOwnProperty(key)) {\n                    continue;\n                }\n\n                self.fields[key].revalidate();\n                if (!self.fields[key].valid) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        this.validFor = function(values) {\n            var field,\n                i = 0,\n                fieldKeys,\n                currentValue,\n                areAllRulesValid = true;\n\n            for (field in self.fields) {\n                if (!self.fields.hasOwnProperty(field)) {\n                    continue;\n                }\n\n                fieldKeys = field.split('.');\n                currentValue = values[fieldKeys[0]];\n\n                // account for chained field names\n                for (i = 1; i < fieldKeys.length; i++) {\n                    // we'll get an out of bounds error if the field doesn't exist\n                    // let's treat this as an undefined\n                    try {\n                        currentValue = currentValue[fieldKeys[i]];\n                    } catch (e) {\n                        currentValue = undefined;\n                    }\n                }\n\n                self.fields[field].setValue(currentValue);\n\n                if (!self.fields[field].valid) {\n                    areAllRulesValid = false;\n                }\n            }\n\n            if (!areAllRulesValid) {\n                return false;\n            }\n\n            return true;\n        };\n\n        this.getInvalidFields = function() {\n            var errorFields = {},\n                key;\n\n            for (key in self.fields) {\n                if(self.fields[key].errors && self.fields[key].errors.length) {\n                    errorFields[key] = self.fields[key].errors;\n                }\n            }\n\n            return errorFields;\n        };\n    }\n\n    are = function(rules) {\n        return new Are(rules);\n    };\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = are;\n        }\n        exports.are = are;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/Gruntfile.js":"/*global module */\n\nmodule.exports = function(grunt) {\n    'use strict';\n\n    grunt.loadTasks('tasks');\n\n    grunt.loadNpmTasks('grunt-simple-mocha');\n    grunt.loadNpmTasks('grunt-contrib-requirejs');\n\n    grunt.registerTask('build', ['requirejs']);\n    grunt.registerTask('test', ['simplemocha']);\n    grunt.registerTask('default', ['test', 'build']);\n};\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/amd/are.js":"define(function (require, exports, module) {/*global module, exports */\n\nvar iz = require('./iz');\n\n(function () {\n    \n    var are;\n\n    function Are(rules) {\n        var self = this,\n            currentRule,\n            rule,\n            errors,\n            key;\n\n        self.fields = {};\n\n        for (key in rules) {\n            if (!rules.hasOwnProperty(key)) {\n                continue;\n            }\n\n            // if is an iz object just add rule directly, if not assemble an iz object\n            if (typeof rules[key].revalidate !== 'undefined') {\n                self.fields[key] = rules[key];\n            } else {\n                errors = {};\n\n                // make errors dictionary\n                for (rule in rules[key]) {\n                    if (!rules[key].hasOwnProperty(rule)) {\n                        continue;\n                    }\n\n                    if (rules[key][rule].error) {\n                        errors[rules[key][rule].rule] = rules[key][rule].error;\n                    }\n                }\n\n                currentRule = iz(0, errors);\n\n                // call rule\n                for (rule in rules[key]) {\n                    if (!rules[key].hasOwnProperty(rule)) {\n                        continue;\n                    }\n\n                    // handle 'not_'\n                    if (rules[key][rule].rule.indexOf('not_') > -1) {\n                        currentRule.not();\n                    }\n\n                    currentRule[rules[key][rule].rule.replace('not_', '')].apply(\n                        currentRule,\n                        rules[key][rule].args || []\n                    );\n                }\n\n                self.fields[key] = currentRule;\n            }\n        }\n\n        this.valid = function() {\n            for (var key in self.fields) {\n                if (!self.fields[key].hasOwnProperty(key)) {\n                    continue;\n                }\n\n                self.fields[key].revalidate();\n                if (!self.fields[key].valid) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        this.validFor = function(values) {\n            var field,\n                i = 0,\n                fieldKeys,\n                currentValue,\n                areAllRulesValid = true;\n\n            for (field in self.fields) {\n                if (!self.fields.hasOwnProperty(field)) {\n                    continue;\n                }\n\n                fieldKeys = field.split('.');\n                currentValue = values[fieldKeys[0]];\n\n                // account for chained field names\n                for (i = 1; i < fieldKeys.length; i++) {\n                    // we'll get an out of bounds error if the field doesn't exist\n                    // let's treat this as an undefined\n                    try {\n                        currentValue = currentValue[fieldKeys[i]];\n                    } catch (e) {\n                        currentValue = undefined;\n                    }\n                }\n\n                self.fields[field].setValue(currentValue);\n\n                if (!self.fields[field].valid) {\n                    areAllRulesValid = false;\n                }\n            }\n\n            if (!areAllRulesValid) {\n                return false;\n            }\n\n            return true;\n        };\n\n        this.getInvalidFields = function() {\n            var errorFields = {},\n                key;\n\n            for (key in self.fields) {\n                if(self.fields[key].errors && self.fields[key].errors.length) {\n                    errorFields[key] = self.fields[key].errors;\n                }\n            }\n\n            return errorFields;\n        };\n    }\n\n    are = function(rules) {\n        return new Are(rules);\n    };\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = are;\n        }\n        exports.are = are;\n    }\n}());\n\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/amd/iz.js":"define(function (require, exports, module) {/*global module, exports, require */\nvar validators = require('./validators');\n\n(function () {\n    \n\n    var iz;\n\n    /**\n     * @param value\n     * @param error_messages\n     * @constructor\n     */\n    function Iz(value, error_messages) {\n        var self = this;\n\n        if (typeof error_messages === 'object') {\n            this.error_messages = error_messages;\n        } else {\n            this.error_messages = {};\n        }\n\n        this._not = false;\n        this._calledValidations = {};\n\n        function not() {\n            self._not = true;\n            return self;\n        }\n\n        function revalidate() {\n            self.errors = [];\n            self.valid = true;\n\n            for (var key in self._calledValidations) {\n                var rule = self._calledValidations[key];\n\n                if (self._calledValidations.hasOwnProperty(key)) {\n                    if (rule.not) {\n                        self.not();\n                    }\n\n                    validator_partial(rule.validation)\n                        .apply(self, rule.args);\n                }\n            }\n            return self;\n        }\n\n        function setValue(value) {\n            self.value = value;\n            self.revalidate();\n            return self;\n        }\n\n        /**\n         * Formats a string using the args index as the key\n         * @param {String} string\n         * @param {Array|Object} args\n         */\n        function format(string, args) {\n            for (var i in args) {\n                string = string.replace(\n                    new RegExp('\\{\\{\\\\s*'+i+'\\\\s*\\}\\}', 'gim'),\n                    args[i]\n                );\n            }\n            return string;\n        }\n\n        this.not = not;\n        this.value = value;\n        this.setValue = setValue;\n        this.revalidate = revalidate;\n        this.errors = [];\n        this.valid = true;\n\n        /**\n         * Partial application with currying into a validation function. Pushes to error array if an error exists.\n         * If an error_message is specified for some specific check then that message is used. Otherwise just the function name.\n         * Also sets valid to false if an error is found. It can't ever set valid to true.\n         * @param fn\n         */\n        function validator_partial(fn) {\n            var fnName = Array.prototype.slice.call(arguments)[0],\n                args = Array.prototype.slice.call(arguments, 1);\n            args.unshift(value); //add value to the front\n            return function() {\n                var argArray = Array.prototype.slice.call(arguments),\n                    allArguments = [self.value].concat(argArray),\n                    result = validators[fn].apply(null, allArguments),\n                    key = (self._not ? 'not_' : '') + fnName;\n\n                //save rules that have been called\n                self._calledValidations[key] = {\n                    not: self._not,\n                    validation: fn,\n                    args: argArray\n                };\n\n                //2 failed validation cases\n                if ((!this._not && !result) || (this._not && result)) {\n                    //change error message based on not and if an error message is specified\n                    if (!this._not && typeof this.error_messages[fn] !== 'undefined') {\n                        this.errors.push(format(this.error_messages[fn], allArguments));\n                    } else if (this._not && typeof this.error_messages['not_' + fn] !== 'undefined') {\n                        this.errors.push(format(this.error_messages['not_' + fn], allArguments));\n                    } else if (this._not) {\n                        this.errors.push('Not ' + fn);\n                    } else {\n                        this.errors.push(fn);\n                    }\n                    //all of these cases result in non-validity\n                    this.valid = false;\n                }\n                //set not back for the next test\n                this._not = false;\n                //chain\n                return this;\n            };\n        }\n\n        for (var fn in validators) {\n            if (validators.hasOwnProperty(fn)) {\n                this[fn] = validator_partial(fn);\n            }\n        }\n    }\n\n    /**\n     * Factory for creating chained checking objects\n     * @param value{*}\n     * @param error_messages{Object}\n     * @return {Object} of type Iz\n     */\n    iz = function (value, error_messages) {\n        return (new Iz(value, error_messages));\n    };\n\n    for (var fn in validators) {\n        if (validators.hasOwnProperty(fn)) {\n            iz[fn] = validators[fn];\n        }\n    }\n\n    iz.addValidator = function (name, func, force) {\n        validators.addValidator(name, func, force);\n        iz[name] = func;\n    };\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = iz;\n        }\n        exports.iz = iz;\n    }\n}());\n\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/amd/validators.js":"define(function (require, exports, module) {/*global module, exports */\n(function () {\n    \n\n    function addValidator(name, validator, force) {\n        if (typeof validators [name] !== 'undefined'\n            && force !== true) {\n            throw new Error('Not adding validator because ' + name + ' already exists');\n        }\n\n        if (name === 'addValidator') {\n            throw new Error('Cannot override addValidator');\n        }\n\n        validators[name] = validator;\n    }\n\n    var validators = {};\n\n    function izAlphaNumeric(value) {\n        return (/^[a-z0-9]+$/i).test(value);\n    }\n\n    function izString(value) {\n        return typeof value === 'string' || value instanceof String;\n    }\n\n    function izNumber(val) {\n        if ((typeof val === 'string' || typeof val === 'number') && !isNaN(val % 1)) {\n            return true;\n        }\n        return false;\n    }\n\n    function izBetween(val, start, end) {\n        if ((typeof val === 'object' || typeof val === 'function') ||\n                (typeof start === 'object' || typeof start === 'function') ||\n                (typeof end === 'object' || typeof end === 'function')) {\n            return false;\n        }\n\n        if ((val >= start && val <= end)) {\n            return true;\n        }\n        return false;\n    }\n\n    function izBoolean(value) {\n        if (typeof value === 'boolean' || (typeof value === 'number' && (value === 0 || value === 1))) {\n            return true;\n        }\n        return false;\n    }\n\n    function izInt(value, allowDecimal) {\n        if (typeof allowDecimal !== 'boolean') {\n            allowDecimal = false;\n        }\n\n        if (!allowDecimal) {\n            return (/^\\s*(\\+|-)?\\d+\\s*$/).test(value);\n        } else if (izNumber(value) && value % 1 === 0) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @author Phil Green (ShirtlessKirk) https://gist.github.com/2134376\n     */\n    function luhnChk(luhn) {\n        var len = luhn.length,\n            mul = 0,\n            prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n            sum = 0;\n\n        while (len--) {\n            sum += prodArr[mul][parseInt(luhn.charAt(len), 10)];\n            mul ^= 1;\n        }\n\n        return sum % 10 === 0 && sum > 0;\n    }\n\n    /**\n     * Returns the name of the class that the object is\n     * @author http://blog.magnetiq.com/post/514962277/finding-out-class-names-of-javascript-objects\n     * @param obj{Object}\n     * @return String name of the class\n     */\n    function izGetObjectClass(obj) {\n        if (obj && obj.constructor && obj.constructor.toString) {\n            var arr = obj.constructor.toString().match(/function\\s*(\\w+)/);\n\n            if (arr && arr.length === 2) {\n                return arr[1];\n            }\n        }\n\n        return undefined;\n    }\n\n    function izCc(value) {\n        if (typeof value !== 'string' && typeof value !== 'number') {\n            return false;\n        }\n\n        value = value.replace(/[ \\-]/g, ''); // normalizing\n        if (izInt(value)) {\n            return luhnChk(value);\n        }\n        return false;\n    }\n\n    /**\n     * TODO: maybe provide format and use: http://www.mattkruse.com/javascript/date/source.html\n     * but that seems in elegant. Then again dates in general are in elegant... *shrug*\n     * @param value\n     * @return {Boolean}\n     */\n    function izDate(value) {\n        return izGetObjectClass(value) === 'Date' ||\n            new Date(value).toString() !== 'Invalid Date' || !isNaN(new Date(value));\n    }\n\n    function izDecimal(value) {\n        return izNumber(value) && !izInt(value, false);\n    }\n\n    /**\n     * Basically just expects the @ symbol. There was a full discussion about it here:\n     * http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n     *\n     * Might make this more complicated in the future... or not *shrug*\n     * @param value\n     * @return {Boolean}\n     */\n    function izEmail(value) {\n        return !(typeof value !== 'string') && (/\\S+@\\S+/).test(value);\n    }\n\n    /**\n     * True if the parameter is empty. length > 0 for objects (if exists) or arrays, Functions/Objects have no properties,\n     * or the type is primitive.\n     * @param value of any type\n     * @return {Boolean}\n     */\n    function izEmpty(value) {\n        var type = typeof value,\n            key;\n        //arrays and objects with length properties\n        if(value.hasOwnProperty('length') && type !== 'function' && value.length > 0) {\n            return false;\n        } else if(type === 'function' || type === 'object') {\n            for (key in value) {\n                if(value.hasOwnProperty(key)) {\n                    return false; //on first valid key, return false;\n                }\n            }\n        }\n\n        //primitives are empty as are objects without properties and empty arrays\n        return true;\n    }\n\n    function izBlank(value) {\n        if (typeof value === 'string') {\n            return izEmpty(value);\n        }\n\n        return false;\n    }\n\n    /**\n     * Strictly Equal\n     * @param value\n     * @param value2\n     * @return {Boolean}\n     */\n    function izEqual(value, value2) {\n        var valueType = typeof value,\n            value2Type = typeof value2,\n            key;\n\n        if ((valueType === 'object' || valueType === 'function') && typeof value.equals === 'function') {\n            if ((value2Type === 'object' || value2Type === 'function')) {\n                //value2 does not need the equals method, if an exception is thrown here that is the implementor\n                //catching it returning false might result in a bug that is hard to track\n                return value.equals(value2);\n            }\n        } else if(valueType === 'object' || valueType === 'function') {\n            for(key in value) {\n                if (value.hasOwnProperty(key) && !value2.hasOwnProperty(key) && key !== 'equals') {\n                    //if property is an object then recursively check\n                    if (typeof value[key] === 'object' || typeof value[key] === 'function' && !izEqual(value[key], value2[key])) {\n                        return false;\n                    } else if (value[key] !== value2[key]) { //if not object or function\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n\n        return value === value2;\n    }\n\n    /**\n     * Is obj1 and extension of obj2? True if this is the case.\n     * @param obj1\n     * @param obj2\n     * @return {Boolean}\n     */\n    function izExtension(obj1, obj2) {\n        var key;\n        if (typeof obj1 !== 'object' || typeof obj2 !== 'object') {\n            return false;\n        }\n\n        for (key in obj2) {\n            if (obj2.hasOwnProperty(key) && typeof obj1[key] === 'undefined') {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Accepts anything.anything.anything.ext.ext and matches the last ext\n     * @param value a file extension of a file name\n     */\n    function izFileExtension(value, validExtensions) {\n        var ext;\n\n        if (typeof validExtensions !== 'object' ||\n                typeof validExtensions.indexOf === 'undefined' || typeof value !== 'string') {\n            return false;\n        }\n\n        ext = value.split('.').pop().toLowerCase(); //split by '.' and get me the last thing, then lowercase it\n        if (validExtensions.indexOf(ext) !== -1) {\n            return true;\n        }\n        return false;\n    }\n\n    function izFileExtensionAudio(value) {\n        var validExtensions = ['mp3', 'ogg', 'aac', 'wav'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izFileExtensionImage(value) {\n        var validExtensions = ['gif', 'png', 'jpeg', 'jpg', 'svg', 'bmp'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izFileExtensionVideo(value) {\n        var validExtensions = ['mp4', 'ogv', 'm4v', 'mov', 'avi'];\n        return izFileExtension(value, validExtensions);\n    }\n\n    function izInArray(value, arr) {\n        if (typeof arr !== 'object' || typeof arr.indexOf === 'undefined') {\n            return false;\n        }\n\n        if (arr.indexOf(value) !== -1) {\n            return true;\n        }\n        return false;\n    }\n\n    function izAnArray(arr) {\n        return Object.prototype.toString.call(arr) === '[object Array]';\n    }\n\n    /**\n     * Matches IPv4, IPv6 or hostname\n     * @author Mikulas Dite http://stackoverflow.com/questions/9208814/validate-ipv4-ipv6-and-hostname\n     * @param str\n     * @return boolean\n     */\n    function izIp(str) {\n        var re = (/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$|^(?:(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){6})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:::(?:(?:(?:[0-9a-fA-F]{1,4})):){5})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){4})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,1}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){3})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,2}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:(?:[0-9a-fA-F]{1,4})):){2})(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,3}(?:(?:[0-9a-fA-F]{1,4})))?::(?:(?:[0-9a-fA-F]{1,4})):)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,4}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9]))\\.){3}(?:(?:25[0-5]|(?:[1-9]|1[0-9]|2[0-4])?[0-9])))))))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,5}(?:(?:[0-9a-fA-F]{1,4})))?::)(?:(?:[0-9a-fA-F]{1,4})))|(?:(?:(?:(?:(?:(?:[0-9a-fA-F]{1,4})):){0,6}(?:(?:[0-9a-fA-F]{1,4})))?::))))$/);\n        return re.test(str);\n    }\n\n    function izMinLength(val, len) {\n        if ((typeof val === 'string' || typeof val === 'object') &&\n                typeof val.length !== 'undefined' && izInt(len) && val.length >= len) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izMaxLength(val, len) {\n        if ((typeof val === 'string' || typeof val === 'object') &&\n            typeof val.length !== 'undefined' && izInt(len) && val.length <= len) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izMultiple(num, multiple) {\n        if (typeof num !== 'number' || typeof multiple !== 'number') {\n            return false;\n        }\n        if (num % multiple === 0) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function izOfType(obj, type) {\n        if (typeof obj === 'object' && typeof obj.length === 'undefined' && typeof type === 'string') {\n            //is truly an object\n            if (izGetObjectClass(obj) === type) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izPhone(str) {\n        var cleanedStr = '',\n            numbers = [];\n        if (typeof str === 'string') {\n            cleanedStr = str.replace(/[^x0-9]/g, '');\n            numbers = cleanedStr.split('x');\n            //first and last array elements are numbers, this allows for multiple x's between the phone number and extension (if exists)\n            if (numbers.length > 0 && izInt(numbers[0]) &&  // has at least 1 value in the array and it is an integer\n                    (numbers[0].length === 10 || numbers[0].length === 11) && // it has an extension with or without country code\n                    izInt(numbers.pop())) { //if it is has an extension it is a valid number\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izPostal(str) {\n        var cleanedStr = '';\n        if (typeof str === 'string') {\n            //removing everything but numbers\n            cleanedStr = str.replace(/[^0-9]/g, '');\n            //is either a 5 or 9 digit zip code...\n            if (izInt(cleanedStr) &&\n                    (cleanedStr.length === 5 || cleanedStr.length === 9)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izSsn(str) {\n        var cleanedStr = '';\n        if (typeof str === 'string') {\n            cleanedStr = str.replace(/[^0-9]/g, '');\n            //There are varying rules depending on date of issuance. I will say that having 9 digits is all that is needed for now.\n            if (izInt(cleanedStr) && (cleanedStr.length === 9)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function izRequired(obj) {\n        return obj !== undefined && obj !== null && obj !== '';\n    }\n\n\n    function izRequiredOr(validator) {\n        return function(val) {\n            return !izRequired(val) || validator.apply(this, Array.prototype.slice.call(arguments));\n        };\n    }\n\n    //Expose some methods, this is done to preserve function names in all browsers\n    validators.alphaNumeric = izRequiredOr(izAlphaNumeric);\n    validators.string = izRequiredOr(izString);\n    validators.between = izRequiredOr(izBetween);\n    validators.blank = izRequiredOr(izBlank);\n    validators.boolean = izRequiredOr(izBoolean);\n    validators.cc = izRequiredOr(izCc);\n    validators.date = izRequiredOr(izDate);\n    validators.decimal = izRequiredOr(izDecimal);\n    validators.email = izRequiredOr(izEmail);\n    validators.empty = izRequiredOr(izEmpty);\n    validators.equal = izRequiredOr(izEqual);\n    validators.extension = izExtension;\n    validators.fileExtension = izRequiredOr(izFileExtension);\n    validators.fileExtensionAudio = izRequiredOr(izFileExtensionAudio);\n    validators.fileExtensionImage = izRequiredOr(izFileExtensionImage);\n    validators.fileExtensionVideo = izRequiredOr(izFileExtensionVideo);\n    validators.inArray = izInArray;\n    validators.anArray = izRequiredOr(izAnArray);\n    validators.int = izRequiredOr(izInt);\n    validators.ip = izRequiredOr(izIp);\n    validators.minLength = izRequiredOr(izMinLength);\n    validators.maxLength = izRequiredOr(izMaxLength);\n    validators.multiple = izRequiredOr(izMultiple);\n    validators.number = izRequiredOr(izNumber);\n    validators.ofType = izRequiredOr(izOfType);\n    validators.phone = izRequiredOr(izPhone);\n    validators.postal = izRequiredOr(izPostal);\n    validators.required = izRequired;\n    validators.ssn = izRequiredOr(izSsn);\n\n    validators.addValidator = addValidator;\n\n    // Export module\n    if (typeof exports !== 'undefined') {\n        if (typeof module !== 'undefined' && module.exports) {\n            exports = module.exports = validators;\n        }\n        exports.validators = validators;\n    }\n}());\n\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/spec/are.spec.js":"/*global describe, it, xit, xdescribe, before, require */\n/*jshint expr:true*/\n\nvar iz = require('../src/iz'),\n    are = require('../src/are');\n\ndescribe('Are', function() {\n    'use strict';\n\n    describe('group validations', function() {\n\n        beforeEach(function() {\n            this.costErrors = {\n                decimal: 'Must be a decimal!'\n            };\n            this.ageErrors = {\n                not_decimal: 'Shouldn\\'t be a decimal!',\n                int: 'Must be an integer',\n                between: 'This movie is rated R, you are too young!'\n            };\n            this.rules = {\n                cost: iz(5.00, this.costErrors).number(),\n                age: iz(20, this.ageErrors)\n                    .not().decimal()\n                    .int().between(17, 10000)\n            };\n        });\n\n        it('allows you to validate multiple things at once', function () {\n            are(this.rules).valid().should.be.ok;\n        });\n\n    });\n\n    describe('JSON group validations', function() {\n\n        beforeEach(function() {\n            this.rules = {\n                'cost': [\n                    {\n                        'rule': 'between',\n                        'args': [17, 1000],\n                        'error': 'The cost must be between 17, 1000'\n                    },\n                    {\n                        'rule': 'decimal',\n                        'error': 'The cost must be a decimal'\n                    },\n                    {\n                        'rule': 'required',\n                        'error': 'You must specify a cost'\n                    },\n                ],\n                'producer.id': [\n                    {\n                        'rule': 'int',\n                        'error': 'Producer ID must be an int'\n                    }\n                ],\n                'producer.name.first': [\n                    {\n                        'rule': 'alphaNumeric',\n                        'error': 'Must be names and numbers'\n                    }\n                ]\n            };\n\n            this.validObject = {\n                cost: 90.3,\n                producer: {\n                    id: 5,\n                    name: {\n                        first: 'steve'\n                    }\n                }\n            };\n\n            this.invalidObject = {\n                cost: 90.3,\n                producer: {\n                    id: 'bob', //invalid\n                    name: {\n                        first: 'steve'\n                    }\n                }\n            };\n        });\n\n        it('correctly validates', function() {\n            are(this.rules).validFor(this.validObject).should.be.ok;\n            are(this.rules).validFor(this.invalidObject).should.not.be.ok;\n        });\n\n        it('returns error messages', function() {\n            var myAre = are(this.rules),\n                errorFields;\n\n            myAre.validFor(this.invalidObject);\n            errorFields = myAre.getInvalidFields();\n\n            errorFields['producer.id'].length.should.be.ok;\n        });\n\n        describe('with required fields', function() {\n\n            beforeEach(function() {\n                this.rules['producer.name.first'].push({\n                    rule: 'required'\n                });\n\n                this.validObject = {\n                    cost: 40.3,\n                    producer: {\n                        name: {\n                            first: 'steve'\n                        }\n                    }\n                };\n\n                this.invalidObject = {\n                    producer: {}\n                };\n\n                this.validations = are(this.rules);\n            });\n\n            it('correctly validates', function() {\n                this.validations.validFor(this.validObject).should.be.ok;\n                this.validations.validFor(this.invalidObject).should.not.be.ok;\n            });\n\n        });\n\n    });\n\n    describe('(Issue #26) are.rules', function() {\n\n        beforeEach(function() {\n            this.rules = {\n                'address.city': [\n                    {\n                        'rule': 'required',\n                        'error': 'You must specify a city'\n                    },\n                    {\n                        'rule': 'minLength',\n                        'args': [5],\n                        'error': 'The city name length must be more than 5'\n                    }\n                ],\n                'address.street': [\n                    {\n                        'rule': 'required',\n                        'error': 'You must specify a street'\n                    },\n                    {\n                        'rule': 'minLength',\n                        'args': [5],\n                        'error': 'The street name length must be more than 5'\n                    }\n                ]\n            };\n\n            this.validationObject = are(this.rules);\n\n            this.validationObject.validFor({\n                address: {\n                    city: 'Test',\n                    street: \"Street test name\"\n                }\n            });\n\n            this.invalidFields = this.validationObject.getInvalidFields();\n        });\n\n        it('should revalidate all fields', function() {\n            this.invalidFields.should.not.have.property('address.street');\n        });\n\n    });\n\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/spec/iz.spec.js":"/*global describe, it, xit, xdescribe, before, require */\n/*jshint expr:true*/\n\nvar iz = require('../src/iz');\ndescribe('Iz', function () {\n    'use strict';\n\n    it('can be created', function () {\n        //some value\n        (typeof (iz(5)) === 'object').should.be.ok;\n        (typeof iz === 'function').should.be.ok;\n    });\n\n    it('has prototyped methods and can call one', function () {\n        (typeof iz(5).alphaNumeric === 'function').should.be.ok;\n        (iz(5).alphaNumeric().valid).should.be.ok;\n        //with parameters\n        (iz(5).between(3, 5).valid).should.be.ok;\n    });\n\n    it('allows methods to be chained together', function () {\n        iz(5).alphaNumeric().between(3, 5).int().valid.should.be.ok;\n    });\n\n    it('tells you what fails when you chain', function () {\n        var result = iz(5).between(1, 2).boolean();\n        result.valid.should.not.be.ok;\n        result.errors.should.include('between');\n        result.errors.should.include('boolean');\n    });\n\n    it('accepts an error message list', function () {\n        var errors = {\n                between: 'Is not between',\n                boolean: 'Is not Boolean'\n            },\n            result = iz(5, errors).between(1, 2).boolean();\n        result.valid.should.not.be.ok;\n        result.errors.should.include(errors.between);\n        result.errors.should.include(errors.boolean);\n    });\n\n    it('allows to .not validations', function () {\n        iz(5).not().between(10, 20).valid.should.be.ok;\n        iz(5).not().email().valid.should.be.ok;\n        iz('bob@yahoo').not().email().valid.should.not.be.ok;\n    });\n\n    it('accepts errors for .not\\'d validations', function () {\n        var expected = 'Your value needs to not be between 4 and 6, it is currently 5!',\n            error_messages = {\n                not_between: 'Your value needs to not be between {{ 1 }} and {{2 }}, it is currently {{0}}!'\n            };\n\n        iz(5, error_messages).not().between(4, 6).errors.should.include(expected);\n        iz(5).not().between(4, 6).errors.should.include('Not between');\n    });\n\n    it('allows switching between .not and normal validations', function () {\n        iz(5).between(4, 6).not().ip().int().valid.should.be.ok;\n    });\n\n    it('allows for revalidation when the value is changed', function() {\n        var rule = iz(5).between(2, 8);\n        rule.valid.should.be.ok;\n        rule.value = 10;\n        rule.revalidate().valid.should.not.be.ok;\n    });\n\n    it('calls revalidate when setting a new value', function() {\n        var rule = iz(5).between(2, 8);\n        rule.setValue(10).valid.should.not.be.ok;\n    });\n\n    it('clears out errors and status during revalidation', function() {\n        var rule = iz(5).between(6, 8);\n        rule.valid.should.not.be.ok;\n        rule.errors.length.should.equal(1);\n        rule.setValue(7).valid.should.be.ok;\n        rule.errors.length.should.equal(0);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/spec/spec_helper.js":"/*global process, require, should, request, app, domain */\nprocess.env.NODE_ENV = 'test';\n\nshould = require('should');\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/spec/validators.spec.js":"/*global describe, it, xit, xdescribe, before, require */\n/*jshint expr:true*/\n\nvar iz = require('../src/iz');\nvar validator = require('../src/validators');\ndescribe('Validation', function () {\n    'use strict';\n\n    it('can validate alpha numeric values', function () {\n        iz.alphaNumeric('a2d1kf0v9r9fje9fdgnsdksdf9240uyjsdfgkj').should.be.ok;\n        iz.alphaNumeric('aaaaaaa').should.be.ok;\n        iz.alphaNumeric('999999').should.be.ok;\n        iz.alphaNumeric(9999999).should.be.ok;\n        iz.alphaNumeric('_3423423').should.not.be.ok;\n        iz.alphaNumeric('342 3423').should.not.be.ok;\n        iz.alphaNumeric('alals*fd').should.not.be.ok;\n        iz.alphaNumeric({}).should.not.be.ok;\n        iz.alphaNumeric(function () {}).should.not.be.ok;\n        iz.alphaNumeric([]).should.not.be.ok;\n\n        iz.alphaNumeric(null).should.be.ok;\n        iz.alphaNumeric(undefined).should.be.ok;\n    });\n\n    it('can validate string values', function () {\n        iz.string('').should.be.ok;\n        iz.string('a2d1kf0v9r9fje9fdgnsdksdf9240uyjsdfgkj').should.be.ok;\n        iz.string('aaaaaaa').should.be.ok;\n        iz.string('999999').should.be.ok;\n        iz.string('_3423423').should.be.ok;\n        iz.string('342 3423').should.be.ok;\n        iz.string('alals*fd').should.be.ok;\n\n        iz.string(new String('')).should.be.ok;\n        iz.string(new String('239084203')).should.be.ok;\n        iz.string(new String('alals*fd')).should.be.ok;\n\n        iz.string(9999999).should.not.be.ok;\n        iz.string({}).should.not.be.ok;\n        iz.string([]).should.not.be.ok;\n        iz.string(function () {}).should.not.be.ok;\n        iz.string(/[ \\-]/g).should.not.be.ok;\n        iz.string(new Date()).should.not.be.ok;\n\n        function Car() {}\n        iz.string(new Car()).should.not.be.ok;\n\n        iz.string(null).should.be.ok;\n        iz.string(undefined).should.be.ok;\n    });\n\n    it('can validate that a primitive is between 2 other primitives', function () {\n        iz.between(5, 5, 6).should.be.ok;\n        iz.between(6, 5, 6).should.be.ok;\n        iz.between(4, 3, 5).should.be.ok;\n        iz.between(3, 4, 5).should.not.be.ok;\n        iz.between(7, 4, 5).should.not.be.ok;\n        iz.between('abc', 'aaa', 'bbb').should.be.ok;\n        iz.between('aaa', 'abc', 'bbb').should.not.be.ok;\n        iz.between('aaa', 'aaa', 'bbb').should.be.ok;\n        iz.between([1, 2], [1], [1, 4]).should.not.be.ok; //default array comparison... this is false.\n        iz.between({},{},{}).should.not.be.ok; //it hates objects\n        iz.between(function (){}, function (){}, function () {}).should.not.be.ok; //it also despises functions\n\n        iz.between(null, 1, 5).should.be.ok;\n        iz.between(undefined, 1, 5).should.be.ok;\n    });\n\n    it('can validate boolean values', function () {\n        iz.boolean(true).should.be.ok;\n        iz.boolean(false).should.be.ok;\n        iz.boolean(1).should.be.ok;\n        iz.boolean(0).should.be.ok;\n        iz.boolean(-1).should.not.be.ok;\n        iz.boolean('deadbeef').should.not.be.ok;\n        iz.boolean('*').should.not.be.ok;\n        iz.boolean(/[ \\-]/g).should.not.be.ok;\n\n        iz.boolean(null).should.be.ok;\n        iz.boolean(undefined).should.be.ok;\n    });\n\n    it('can validate blank values', function() {\n        iz.blank('').should.be.ok;\n        iz.blank('hi').should.not.be.ok;\n        iz.blank([]).should.not.be.ok;\n\n        iz.blank(undefined).should.be.ok;\n        iz.blank(null).should.be.ok;\n    });\n\n    /**\n     * Tests from Paypal: http://www.paypalobjects.com/en_US/vhelp/paypalmanager_help/credit_card_numbers.htm\n     */\n    it('can validate credit card numbers', function () {\n        iz.cc('371449635398431').should.be.ok; //amex\n        iz.cc('343434343434343').should.be.ok; //amex\n        iz.cc('371144371144376').should.be.ok; //amex corp\n        iz.cc('5610591081018250').should.be.ok; //aus bankcard\n        iz.cc('30569309025904').should.be.ok; //diners club\n        iz.cc('38520000023237').should.be.ok; //diners club\n        iz.cc('6011111111111117').should.be.ok; //discover\n        iz.cc('6011000990139424').should.be.ok; //discover\n        iz.cc('3530111333300000').should.be.ok; //jcb\n        iz.cc('3566002020360505').should.be.ok; //jcb\n        iz.cc('5555555555554444').should.be.ok; //mc\n        iz.cc('5105105105105100').should.be.ok; //mc\n        iz.cc('4111111111111111').should.be.ok; //visa\n        iz.cc('4012888888881881').should.be.ok; //visa\n        iz.cc('4222222222222').should.be.ok; //visa\n        //iz.cc('76009244561').should.be.ok; //dankort (pbs) currently fails... anyone know why?\n        iz.cc('5019717010103742').should.be.ok; //dankort (pbs)\n        iz.cc('6331101999990016').should.be.ok; //switch/solo (paymentech)\n\n        iz.cc('0000000000000000').should.not.be.ok;\n\n        iz.cc('4012 8888 8888 1881').should.be.ok; //visa with spaces\n        iz.cc('4012-8888-8888-1881').should.be.ok; //visa with dashes\n        iz.cc({}).should.not.be.ok;\n        iz.cc(function () {}).should.not.be.ok;\n        iz.cc(['5']).should.not.be.ok;\n\n        iz.cc(null).should.be.ok;\n        iz.cc(undefined).should.be.ok;\n    });\n\n    it('can validated dates', function () {\n        iz.date(new Date()).should.be.ok;\n        iz.date(0).should.be.ok; //assumed milliseconds from epoch\n        iz.date('09/23/2012').should.be.ok;\n        iz.date('09-23-2012 21:27:00').should.be.ok;\n        iz.date('January 5th, 2012').should.not.be.ok;\n        iz.date('Pizza').should.not.be.ok;\n        iz.date({}).should.not.be.ok;\n        iz.date(function () {}).should.not.be.ok;\n        iz.date([]).should.not.be.ok;\n\n        iz.date(null).should.be.ok;\n        iz.date(undefined).should.be.ok;\n    });\n\n    it('can validate decimals', function () {\n        iz.decimal('5.5').should.be.ok;\n        iz.decimal(5.5).should.be.ok;\n        iz.decimal('340298.3234234').should.be.ok;\n\n        iz.decimal(5).should.not.be.ok;\n        iz.decimal('5').should.not.be.ok;\n        iz.decimal('5.5.5').should.not.be.ok;\n        iz.decimal({}).should.not.be.ok;\n        iz.decimal(function () {}).should.not.be.ok;\n        iz.decimal([]).should.not.be.ok;\n\n        iz.decimal(null).should.be.ok;\n        iz.decimal(undefined).should.be.ok;\n    });\n\n    it('can validate email address', function () {\n        iz.email('bob@bob').should.be.ok;\n        iz.email('bob@bob.com').should.be.ok;\n        iz.email('bob').should.not.be.ok;\n        iz.email({}).should.not.be.ok;\n        iz.email(function () {}).should.not.be.ok;\n        iz.email([]).should.not.be.ok;\n        iz.email(5).should.not.be.ok;\n\n        iz.email(null).should.be.ok;\n        iz.email(undefined).should.be.ok;\n    });\n\n    it('can validate that something is empty', function () {\n        iz.empty([]).should.be.ok;\n        iz.empty({}).should.be.ok;\n        iz.empty(function () {}).should.be.ok;\n        iz.empty(true).should.be.ok;\n        iz.empty(5).should.be.ok;\n        iz.empty({bob: true}).should.not.be.ok;\n        iz.empty(['hi']).should.not.be.ok;\n\n        iz.empty(null).should.be.ok;\n        iz.empty(undefined).should.be.ok;\n    });\n\n    it('can validate that 2 things are strictly equal', function () {\n        var obj1 = {\n                bob: 'cheese',\n                equals : function(obj2) {\n                    if (this.bob === obj2.bob) {\n                        return true;\n                    }\n                    return false;\n                }\n            },\n            //equals method can be different and it will still match\n            obj2 = {\n                bob: 'cheese',\n                equals : function () {}\n            },\n            //don't even need the equals method\n            obj3 = {\n                bob: 'cheese'\n            },\n            obj4 = {\n                bob: 'pizza'\n            };\n        iz.equal('bob', 'bob').should.be.ok;\n        iz.equal({},{}).should.be.ok;\n        iz.equal({},{'bob': true}).should.be.ok;\n        iz.equal(obj1, obj2).should.be.ok;\n        iz.equal(obj1, obj3).should.be.ok;\n        iz.equal(obj1, obj4).should.not.be.ok;\n    });\n\n    it('can validate that an object is an extension of another object', function () {\n        iz.extension({},'5').should.not.be.ok;\n        iz.extension({\n            bob: 10,\n            something: 'hi',\n            somethingElse: 'bye'\n        },{\n            bob: '912dfinn',\n            something: 'yes!'\n        }).should.be.ok;\n        iz.extension([],[]).should.be.ok;\n        iz.extension({\n            bob: 10,\n            something: 'hi'\n        },{\n            bob: '912dfinn',\n            something: 'yes!',\n            somethingElse: 'bye'\n        }).should.not.be.ok;\n        iz.extension([],['hello']).should.not.be.ok;\n    });\n\n    it('can validate that a file extension is valid', function () {\n        iz.fileExtension('apple_pie.pizza', ['pizza']).should.be.ok;\n        iz.fileExtension('hello.png', ['png']).should.be.ok;\n        iz.fileExtension('hello.PNG', ['png']).should.be.ok;\n        iz.fileExtension('hello.png', ['PNG']).should.not.be.ok;\n        iz.fileExtension('hello.png', ['.png']).should.not.be.ok;\n        iz.fileExtension('hello.mp3', ['png']).should.not.be.ok;\n        iz.fileExtension({},{}).should.not.be.ok;\n\n        iz.fileExtension(null).should.be.ok;\n        iz.fileExtension(undefined).should.be.ok;\n    });\n\n    it('can validate audio file extensions', function () {\n        iz.fileExtensionAudio('apple.mp3').should.be.ok;\n        iz.fileExtensionAudio('apple.png').should.not.be.ok;\n\n        iz.fileExtensionAudio(null).should.be.ok;\n        iz.fileExtensionAudio(undefined).should.be.ok;\n    });\n\n    it('can validate image file extensions', function () {\n        iz.fileExtensionImage('apple.png').should.be.ok;\n        iz.fileExtensionImage('apple.mp3').should.not.be.ok;\n\n        iz.fileExtensionImage(null).should.be.ok;\n        iz.fileExtensionImage(undefined).should.be.ok;\n    });\n\n    it('can validate video file extensions', function () {\n        iz.fileExtensionVideo('apple.mp4').should.be.ok;\n        iz.fileExtensionVideo('apple.mp3').should.not.be.ok;\n\n        iz.fileExtensionVideo(null).should.be.ok;\n        iz.fileExtensionVideo(undefined).should.be.ok;\n    });\n\n    it('can tell if something is in an array', function () {\n        iz.inArray('tofu', ['pizza','chicken','tofu','turkey']).should.be.ok;\n        iz.inArray('lizard', ['pizza','chicken','tofu','turkey']).should.not.be.ok;\n        iz.inArray(5,6).should.not.be.ok;\n        iz.inArray({},[]).should.not.be.ok;\n        iz.inArray(function () {}, 5).should.not.be.ok;\n    });\n\n    it('can detect an array', function () {\n        iz.anArray(['pizza','chicken','tofu','turkey']).should.be.ok;\n        iz.anArray('lizard').should.not.be.ok;\n        iz.anArray(5).should.not.be.ok;\n        iz.anArray({}).should.not.be.ok;\n        iz.anArray(function () {}).should.not.be.ok;\n        iz('').anArray().required().valid.should.not.be.ok;\n    });\n\n    it('can validate integers', function () {\n        iz.int('1000').should.be.ok;\n        iz.int(1000).should.be.ok;\n        iz.int(999).should.be.ok;\n        iz.int('11.0', true).should.be.ok;\n\n        iz.int('11.0').should.not.be.ok;\n        iz.int(11.2).should.not.be.ok;\n        iz.int('bob').should.not.be.ok;\n        iz.int({}).should.not.be.ok;\n        iz.int([]).should.not.be.ok;\n        iz.int(function () {}).should.not.be.ok;\n\n        iz.int(null).should.be.ok;\n        iz.int(undefined).should.be.ok;\n    });\n\n    it('can validate IPv4, IPv6 and host names', function () {\n        iz.ip('pizza').should.be.ok;\n        //ipv6\n        iz.ip('3ffe:1900:4545:3:200:f8ff:fe21:67cf').should.be.ok;\n        iz.ip('fe80:0:0:0:200:f8ff:fe21:67cf').should.be.ok;\n        iz.ip('fe80::200:f8ff:fe21:67cf').should.be.ok;\n        //ipv4\n        iz.ip('0.0.0.0').should.be.ok;\n        iz.ip('192.0.2.235').should.be.ok;\n        //technically valid (citing wikipedia), but doesn't pass, but I don't think it is expected:\n        iz.ip('0xC0.0x00.0x02.0xEB').should.not.be.ok;\n        iz.ip('0300.0000.0002.0353').should.not.be.ok;\n        iz.ip('0xC00002EB').should.not.be.ok;\n        iz.ip('3221226219').should.not.be.ok;\n        iz.ip('030000001353').should.not.be.ok;\n\n        iz.ip(null).should.be.ok;\n        iz.ip(undefined).should.be.ok;\n    });\n\n    it('can require a string to have some min length', function () {\n        iz.minLength('Pizza', 5).should.be.ok;\n        iz.minLength('pizza', 4).should.be.ok;\n        iz.minLength('pizza', 6).should.not.be.ok;\n        iz.minLength({}, 5).should.not.be.ok;\n        iz.minLength('lizard', {}).should.not.be.ok;\n\n        iz.minLength(null).should.be.ok;\n        iz.minLength(undefined).should.be.ok;\n    });\n\n    it('can require an array to have some min length', function () {\n        iz.minLength([1, 2, 3, 4, 5, 6], 6).should.be.ok;\n        iz.minLength([1, 2, 3, 4, 5, 6], 5).should.be.ok;\n        iz.minLength([1, 2, 3, 4, 5, 6], 7).should.not.be.ok;\n\n        iz.minLength(null).should.be.ok;\n        iz.minLength(undefined).should.be.ok;\n    });\n\n    it('can require a string to have some max length', function () {\n        iz.maxLength('Pizza', 5).should.be.ok;\n        iz.maxLength('pizza', 6).should.be.ok;\n        iz.maxLength('pizza', 4).should.not.be.ok;\n        iz.maxLength({}, 5).should.not.be.ok;\n        iz.maxLength('lizard', {}).should.not.be.ok;\n\n        iz.maxLength(null).should.be.ok;\n        iz.maxLength(undefined).should.be.ok;\n    });\n\n    it('can require an array to have some max length', function () {\n        iz.maxLength([1, 2, 3, 4, 5, 6], 6).should.be.ok;\n        iz.maxLength([1, 2, 3, 4, 5, 6], 7).should.be.ok;\n        iz.maxLength([1, 2, 3, 4, 5, 6], 5).should.not.be.ok;\n\n        iz.maxLength(null).should.be.ok;\n        iz.maxLength(undefined).should.be.ok;\n    });\n\n    it('can tell if a number is multiple of another number', function () {\n        iz.multiple(10, 5).should.be.ok;\n        iz.multiple(10, 2).should.be.ok;\n        iz.multiple(2, 10).should.not.be.ok;\n        iz.multiple(5, {}).should.not.be.ok; // disallow everything but numbers\n\n        iz.multiple(null).should.be.ok;\n        iz.multiple(undefined).should.be.ok;\n    });\n\n    it('can tell if something is a number', function () {\n        iz.number({}).should.not.be.ok;\n        iz.number('5').should.be.ok;\n        iz.number('5.32342').should.be.ok;\n        iz.number(23123).should.be.ok;\n        iz.number('bob').should.not.be.ok;\n\n        iz.number(null).should.be.ok;\n        iz.number(undefined).should.be.ok;\n    });\n\n    it('can tell if the name of an object is equal to some string', function () {\n        var obj = {};\n\n        function Car() { }\n\n        iz.ofType(new Car(), 'Car').should.be.ok;\n        iz.ofType(new Car(), 'Object').should.not.be.ok;\n        iz.ofType(obj, 'Object').should.be.ok;\n\n        iz.ofType(null).should.be.ok;\n        iz.ofType(undefined).should.be.ok;\n    });\n\n    it('can validate a north american phone number', function () {\n        iz.phone(1231231).should.not.be.ok;\n        iz.phone({}).should.not.be.ok;\n\n        iz.phone('1-415-222-2222').should.be.ok;\n        iz.phone('1.415.555.5555 extension 422').should.be.ok;\n        iz.phone('1415.323.3242 extension x422').should.be.ok;\n        iz.phone('11231234567').should.be.ok;\n\n        iz.phone('123').should.not.be.ok;\n        iz.phone('123456789012').should.not.be.ok;\n\n        iz.phone('1234567890').should.be.ok;\n        iz.phone('12345678901').should.be.ok;\n\n        iz.phone(null).should.be.ok;\n        iz.phone(undefined).should.be.ok;\n    });\n\n    it('can validate a US zip-code', function () {\n        iz.postal(1231231).should.not.be.ok;\n        iz.postal({}).should.not.be.ok;\n\n        iz.postal('94117').should.be.ok;\n        iz.postal('94117 3333').should.be.ok;\n        iz.postal('94117-3333').should.be.ok;\n        iz.postal('94117 33333').should.not.be.ok;\n        iz.postal('9411').should.not.be.ok;\n\n        iz.postal(null).should.be.ok;\n        iz.postal(undefined).should.be.ok;\n    });\n\n    it('can validate a US SSN', function () {\n        iz.ssn(123).should.not.be.ok;\n        iz.ssn({}).should.not.be.ok;\n\n        iz.ssn('123456789').should.be.ok;\n        iz.ssn('123-45-6789').should.be.ok;\n\n        iz.ssn('1234567890').should.not.ok;\n        iz.ssn('123-45-678').should.not.be.ok;\n\n        iz.ssn(null).should.be.ok;\n        iz.ssn(undefined).should.be.ok;\n    });\n\n    it('can validate required', function() {\n        iz.required(null).should.not.be.ok;\n        iz.required(undefined).should.not.be.ok;\n        iz.required('').should.not.be.ok;\n        iz.required({}).should.be.ok;\n        iz.required(function () {}).should.be.ok;\n        iz.required([]).should.be.ok;\n        iz.required(5).should.be.ok;\n        iz.required(new Date()).should.be.ok;\n    });\n\n    var dummyValidator = function(value){\n        if(typeof value !=='string'){\n            return false;\n        }\n        return value.indexOf('test') === 0;\n    };\n\n    it('can add custom validator',function(){\n        iz.addValidator('testStart',dummyValidator);\n\n        validator.should.have.property('testStart');\n\n        iz.should.have.property('testStart');\n        iz.testStart('test text').should.be.ok;\n    });\n\n    it('custom validator does not override existing validator', function () {\n        iz.addValidator.bind(null, 'ssn', dummyValidator).should.throw();\n    });\n\n    it('can override existing validator',function(){\n        iz.addValidator('ssn', dummyValidator, true);\n\n        validator.should.have.property('testStart');\n\n        iz.should.have.property('ssn');\n        iz.ssn('test text').should.be.ok;\n    });\n\n    it('customer validator does not override addValidator', function () {\n        iz.addValidator.bind(null, 'addValidator', dummyValidator).should.throw();\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-iz/node_modules/iz/tasks/amd.js":"module.exports = function (grunt) {\n    'use strict';\n\n    grunt.config.set('requirejs.iz', {\n        options: {\n            appDir: 'src/',\n            dir: 'amd/',\n            cjsTranslate: true,\n            optimize: 'none'\n        }\n    });\n\n};\n"}